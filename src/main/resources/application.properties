# ===================================================================
# CONFIGURACIÓN DEL SERVIDOR DE LA APLICACIÓN
# ===================================================================
# En Railway, esta variable será sobreescrita por la variable de entorno PORT.
# En local, la aplicación correrá en el puerto 8080 (o el que prefieras).
server.port=${PORT:8080}


# ===================================================================
# CONEXIÓN A LA BASE DE DATOS (Configuración Híbrida Local/Railway)
# ===================================================================
# Spring Boot usará las variables de Railway si existen.
# Si no existen (porque estás en tu PC), usará los valores por defecto (los de localhost).

# 1. URL de conexión a la base de datos
#    - Si la variable de entorno MYSQL_URL existe (en Railway), la usará.
#    - Si no, usará la URL de tu base de datos local.
spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost:3306/lora_cafe_db?useSSL=false&serverTimezone=UTC}

# 2. Nombre de usuario para la base de datos
#    - Si MYSQLUSER existe, lo usará.
#    - Si no, usará 'root'.
spring.datasource.username=${MYSQLUSER:root}

# 3. Contraseña para la base de datos
#    - Si MYSQLPASSWORD existe, la usará.
#    - Si no, usará '.david1803' (¡CUIDADO! Nunca subas contraseñas reales a GitHub).
spring.datasource.password=${MYSQLPASSWORD:.david1803}

# 4. Driver de la base de datos (buena práctica)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


# ===================================================================
# CONFIGURACIÓN DE JPA / HIBERNATE
# ===================================================================
# 'update' es bueno para desarrollo. En producción se recomienda 'validate' o 'none'.
spring.jpa.hibernate.ddl-auto=update

# Muestra el SQL en la consola para depuración.
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Usamos el dialecto más moderno de MySQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Permite que las vistas (Thymeleaf) accedan a datos cargados de forma perezosa (LAZY).
spring.jpa.open-in-view=true


# ===================================================================
# CONFIGURACIÓN DE THYMELEAF Y RECURSOS ESTÁTICOS
# ===================================================================
# Deshabilitar la caché de Thymeleaf es ideal para desarrollo.
spring.thymeleaf.cache=false

# Estas son las configuraciones por defecto, no es estrictamente necesario ponerlas,
# pero es bueno tenerlas para claridad.
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.web.resources.static-locations=classpath:/static/